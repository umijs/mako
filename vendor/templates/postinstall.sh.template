#!/bin/bash

# get cpu & os info
OS=$(uname -s | tr '[:upper:]' '[:lower:]')
ARCH=$(uname -m)

if [ "$ARCH" = "x86_64" ]; then
    ARCH="x64"
elif [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then
    ARCH="arm64"
fi

# prepare PACKAGE_NAME
PACKAGE_NAME="@utoo/{{name}}-${OS}-${ARCH}"

# Function to find node_modules directory recursively
find_node_modules() {
    local current_dir="$1"
    local target_package="$2"

    # Check if we've reached the root directory
    if [ "$current_dir" = "/" ]; then
        return 1
    fi

    # Check if node_modules exists in current directory
    if [ -d "$current_dir/node_modules" ]; then
        if [ -d "$current_dir/node_modules/$target_package" ]; then
            echo "$current_dir/node_modules"
            return 0
        fi
    fi

    # Recursively check parent directory
    find_node_modules "$(dirname "$current_dir")" "$target_package"
}

# Find the node_modules directory containing our package
NODE_MODULES_DIR=$(find_node_modules "$(pwd)" "$PACKAGE_NAME")

if [ -z "$NODE_MODULES_DIR" ]; then
    echo "Binary package ${PACKAGE_NAME} not found in any parent node_modules directory"
    exit 1
fi

# create binary config
mkdir -p bin

# copy file
cp -f "${NODE_MODULES_DIR}/${PACKAGE_NAME}/bin/{{name}}" "bin/{{name}}"
chmod +x "bin/{{name}}"

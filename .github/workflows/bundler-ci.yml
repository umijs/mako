name: utoo-bundler-ci

env:
  DEBUG: napi:*
  APP_NAME: "@utoo/bundler"
  MACOSX_DEPLOYMENT_TARGET: "10.13"

on:
  release:
    types: [published]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              cd packages/bundler && npm run build:binding -- --target aarch64-apple-darwin
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              rustup target add x86_64-apple-darwin &&
              cd packages/bundler && npm run build:binding -- --target x86_64-apple-darwin
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |
              rustup target add aarch64-unknown-linux-gnu &&
              cd packages/bundler && npm run build:binding -- --target aarch64-unknown-linux-gnu
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |
              set -e &&
              apk update &&
              apk add --no-cache libc6-compat pkgconfig dav1d libdav1d dav1d-dev clang-static llvm-dev &&
              rustup target add aarch64-unknown-linux-musl &&
              cd packages/bundler && npm run build:binding -- --target aarch64-unknown-linux-musl
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: cd packages/bundler && npm run build:binding -- --target x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |
              set -ex &&
              apk update &&
              apk add --no-cache libc6-compat pkgconfig dav1d libdav1d dav1d-dev clang-static llvm-dev &&
              rustup target add x86_64-unknown-linux-musl && 
              cd packages/bundler && npm run build:binding -- --target x86_64-unknown-linux-musl
          # swc_plugin_runner not supported on aarch64 windows now
          # - host: windows-latest
          #   target: aarch64-pc-windows-msvc
          #   build: |
          #     git config --system core.longpaths true &&
          #     rustup target add aarch64-pc-windows-msvc &&
          #     cd packages/bundler && npm run build:binding -- --target aarch64-pc-windows-msvc
          - host: windows-latest
            build: |
              git config --system core.longpaths true &&
              cd packages/bundler && npm run build:binding -- --target x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc

    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 20
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install dependencies
        run: cd packages/bundler && npm install
      - name: Setup node x86
        uses: actions/setup-node@v4
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build"
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bundler-${{ matrix.settings.target }}
          path: ./packages/bundler/src/bundler.*.node
          if-no-files-found: error
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: cd packages/bundler && npm install
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Move artifacts
        run: cd packages/bundler && npm run artifacts
      - name: List packages
        run: cd packages/bundler && ls -R ./npm
        shell: bash
      - name: Get version from release or use alpha version
        id: get_version
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/@utoo/bundler-v}" >> $GITHUB_OUTPUT
      - name: Update package.json version
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          cd packages/bundler
          sed -i.bak "s/^version: \".*\"/version: \"$VERSION\"/" packages/bundler/package.json
          rm packages/bundler/package.json.bak
      - name: Publish
        run: |
          # npm config set provenance true
          cd packages/bundler &&
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc &&
          npm run version &&
          npm publish --access public
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

name: Rust-CI

on:
  push:
    branches: [master]
  pull_request:
    types: [ opened, synchronize ]

# Cancel prev CI if new commit
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    name: Run tests and doc and build_fixture on ubuntu
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [nightly]
        node_version: [ lts/-1, lts/* ]
    steps:
      - uses: actions/checkout@v2
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'pnpm'
      - run: pnpm i --no-lockfile
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Cache Cargo Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: build
        run: cargo build -v
      - name: test
        if: ${{ matrix.rust == 'stable' || matrix.rust == 'beta' || matrix.rust == 'nightly' }}
        run: >
          cargo test -v
      - name: build_fixture
        run: cargo run --bin mako examples/normal

  build_benchmarks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: build
        run: cargo build -v --benches

  lint_with_clippy:
    runs-on: ubuntu-20.04
    steps:
      - name: install-dependencies
        run: sudo apt update && sudo apt install ninja-build meson nasm
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: clippy
      - uses: actions-rs/cargo@v1
        with:
          args: cargo lint
        env:
          SYSTEM_DEPS_DAV1D_BUILD_INTERNAL: always

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt
      - name: Run rustfmt check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

  cargo-deny:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: EmbarkStudios/cargo-deny-action@v1

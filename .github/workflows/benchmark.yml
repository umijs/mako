name: Rust-Benchmark

on:
  push:
    branches: [master]
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: write
  deployments: write
  pull-requests: write

jobs:
  benchmark:
    name: Run benchmark
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: rustup toolchain update nightly && rustup default nightly

      - name: Setup cargo cache
        uses: actions/cache@v3
        with:
          # ref: https://doc.rust-lang.org/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-store-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup baseline benchmark data
        uses: actions/cache/restore@v3
        with:
          # ref: https://github.com/benchmark-action/github-action-benchmark#minimal-setup
          path: ./benchmark-data
          key: ${{ runner.os }}-benchmark

      - name: Setup comment id
        uses: actions/cache@v3
        with:
          path: ./comment-id
          key: ${{ github.ref }}-pr-comment-id

      - name: Run cargo bench
        run: cargo bench --bench with_examples -- --output-format bencher | tee output.txt

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: examples
          tool: 'cargo'
          output-file-path: output.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          alert-threshold: '150%'
          external-data-json-path: ./benchmark-data/prev.json
          summary-always: true
          fail-on-alert: true
          comment-on-alert: true

      # only comment for pull request
      - name: Comment PR
        uses: actions/github-script@v6
        if: ${{ github.event_name == 'pull_request1' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;
            const cacheIdFile = `./comment-id`;

            let data = '';
            await exec.exec('node', ['-e', `
              const fs = require('fs');
              const path = require('path');
              const summaryDir = path.dirname('${process.env.GITHUB_STEP_SUMMARY}');
              let summary;

              // read benchmark summary from prev step
              fs.readdirSync(summaryDir)
                .filter(file => file.startsWith('step_summary_'))
                .some(file => {
                  const content = fs.readFileSync(path.join(summaryDir, file), 'utf-8');

                  if (content.includes('Benchmark')) {
                    summary = content
                      // add hyperlink for commit hash
                      .replace(
                        /((?:Current|Previous): )"(.{8})(.+?)"/g,
                        '$1<a href="../tree/$2$3"><code>$2</code></a>',
                      )
                      // convert ns to ms for duration time
                      .replace(
                        /\`(\\d+)\`\\s+ns|\`(Â±\\s+)(\\d+)\`/g,
                        (_, d1, s, d2) => \`\${s || ''}\${((d2 || d1)/10e6).toFixed(2)} ms\`,
                      );
                    return true;
                  }
                });

              // read cached comment id
              const commentId = fs.existsSync('${cacheIdFile}') ? fs.readFileSync('${cacheIdFile}', 'utf-8') : null;

              console.log(JSON.stringify({
                summary,
                commentId,
              }));
            `], {
              listeners: {
                stdout: (chunk) => {
                  data += chunk;
                },
              },
            });
            data = JSON.parse(data);

            const { summary, commentId } = data;

            if (commentId) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: commentId,
                body: summary,
              });
            } else {
              const { data: { id } } = await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: prNumber,
                body: summary,
              });
              await exec.exec('node', ['-e', `require('fs').writeFileSync('${cacheIdFile}', '${id}', 'utf-8')`]);
            }

      # only save baseline data for master
      - name: Save baseline benchmark data
        uses: actions/cache/save@v3
        if: ${{ github.event_name == 'pull_request' }}
        with:
          path: ./benchmark-data
          key: ${{ runner.os }}-benchmark

